import { useState, useEffect, useRef } from 'react';
import { X, Moon, Sun, Home, Info, Phone, Settings, Sparkles, Zap, Search } from 'lucide-react';
import { Link, useNavigate } from 'react-router-dom';
import { menuItems } from './NavMenu';
import './navbar.css';

const Navbar = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const inputRef = useRef(null);
  const navigate = useNavigate();

  const toggleSearch = () => setIsSearchOpen(!isSearchOpen);

  const handleFormSubmit = e => {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/products?keyword=${searchQuery}`);
    }
  };

  // Auto-focus the input when it opens
  useEffect(() => {
    if (isSearchOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isSearchOpen]);

  useEffect(() => {
    // Check for dark mode preference
    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      setIsDarkMode(true);
      document.documentElement.classList.add('dark');
    } else {
      setIsDarkMode(false);
      document.documentElement.classList.remove('dark');
    }

    // Handle scroll effect
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const toggleDarkMode = () => {
    if (isDarkMode) {
      document.documentElement.classList.remove('dark');
      localStorage.theme = 'light';
      setIsDarkMode(false);
    } else {
      document.documentElement.classList.add('dark');
      localStorage.theme = 'dark';
      setIsDarkMode(true);
    }
  };

  const toggleMenu = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
  };

  return (
    <div className="relative">
      <div className="fixed top-0 left-0 z-40 w-full">
        {/* Floating particles background */}
        <div className="fixed inset-0 overflow-hidden pointer-events-none z-0">
          <div className="floating-particles">
            {[...Array(20)].map((_, i) => (
              <div
                key={i}
                className="particle"
                style={{
                  left: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 20}s`,
                  animationDuration: `${15 + Math.random() * 10}s`,
                }}
              />
            ))}
          </div>
        </div>

        <nav
          className={` w-full z-50 transition-all duration-500 ${
            isScrolled
              ? 'bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl shadow-lg'
              : 'bg-gradient-to-r from-white/90 via-white/95 to-white/90 dark:from-slate-900/90 dark:via-slate-900/95 dark:to-slate-900/90 backdrop-blur-md'
          }`}
        >
          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-pink-500/5 dark:from-blue-400/10 dark:via-purple-400/10 dark:to-pink-400/10"></div>

          <div className="container mx-auto px-4 relative">
            <div className="flex justify-between items-center h-16">
              {/* Animated Menu Button */}
              <div className="flex items-center">
                <button
                  onClick={toggleMenu}
                  className={`relative p-3 rounded-xl transition-all duration-300 group ${
                    isOpen
                      ? 'bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg scale-110'
                      : 'bg-gradient-to-r from-blue-500/10 to-purple-500/10 hover:from-blue-500/20 hover:to-purple-500/20 text-slate-700 dark:text-slate-300 hover:scale-105'
                  }`}
                  aria-expanded={isOpen}
                  aria-label="Toggle menu"
                >
                  <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500 to-purple-500 opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
                  <div className={`hamburger ${isOpen ? 'active' : ''}`}>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                  <div className="absolute -inset-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl blur opacity-0 group-hover:opacity-30 transition-opacity duration-300 cursor-pointer"></div>
                </button>

                {/* Animated Logo */}
                <Link
                  to="/"
                  className="ml-4 text-2xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent hover:scale-105 transition-transform duration-300 group"
                >
                  <span className="inline-block group-hover:animate-pulse">Brand</span>
                  <span className="inline-block text-emerald-500 group-hover:rotate-12 transition-transform duration-300">
                    Logo
                  </span>
                  <Sparkles className="inline-block w-5 h-5 ml-1 text-yellow-500 group-hover:animate-spin" />
                </Link>
              </div>

              {/* search function  */}
              <div>
                <form
                  className={`flex justify-center items-center ${isSearchOpen ? 'active' : ''}`}
                  onSubmit={handleFormSubmit}
                >
                  <input
                    type="text"
                    placeholder="search product"
                    className={`${
                      isDarkMode ? 'text-white border-white' : 'text-black border-black'
                    } bg-transparent border  px-2 py-1 rounded-lg transition-all duration-300 ease-in-out ${
                      isSearchOpen ? 'opacity-100 scale-100 w-48' : 'opacity-0 scale-0 w-0'
                    }`}
                    value={searchQuery}
                    onChange={e => setSearchQuery(e.target.value)}
                  />
                  <button type="button" onClick={toggleSearch}>
                    <Search
                      className={`${isDarkMode ? 'text-white' : 'text-black'} cursor-pointer`}
                    />
                  </button>
                </form>
              </div>

              {/* Enhanced Dark Mode Toggle */}
              <div className="flex items-center">
                <button
                  onClick={toggleDarkMode}
                  className="relative p-3 rounded-xl bg-gradient-to-r from-yellow-400/20 to-orange-500/20 dark:from-blue-500/20 dark:to-purple-500/20 text-slate-700 dark:text-slate-300 hover:scale-110 transition-all duration-300 group overflow-hidden"
                  aria-label="Toggle dark mode"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 dark:from-blue-500 dark:to-purple-500 opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
                  <div className="relative z-10">
                    {isDarkMode ? (
                      <Sun className="w-5 h-5 group-hover:rotate-180 transition-transform duration-500" />
                    ) : (
                      <Moon className="w-5 h-5 group-hover:-rotate-12 transition-transform duration-500" />
                    )}
                  </div>
                  <div className="absolute -inset-1 bg-gradient-to-r from-yellow-400 to-orange-500 dark:from-blue-500 dark:to-purple-500 rounded-xl blur opacity-0 group-hover:opacity-40 transition-opacity duration-300"></div>
                </button>
              </div>
            </div>
          </div>
        </nav>

        {/* Enhanced Overlay fiexd*/}
        <div
          className={`absolute top-0 left-0 inset-2 z-40 transition-all duration-700 ${
            isOpen
              ? 'bg-black/60 backdrop-blur-lg opacity-100'
              : 'bg-black/0 backdrop-blur-none opacity-0 pointer-events-none'
          }`}
          onClick={toggleMenu}
        >
          <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10"></div>
        </div>

        {/* Enhanced Full-screen Menu */}
        <div
          className={`absolute left-0 inset-x-0 top-0 pt-16 z-40 min-h-screen bg-gradient-to-br from-white via-blue-50/50 to-purple-50/50 dark:from-slate-900 dark:via-slate-800/50 dark:to-slate-900 transform transition-all duration-700 ease-out ${
            isOpen ? 'translate-y-0 opacity-100' : '-translate-y-full opacity-0 pointer-events-none'
          }`}
        >
          {/* Animated background elements */}
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-20 left-10 w-32 h-32 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-xl animate-float"></div>
            <div className="absolute top-40 right-20 w-24 h-24 bg-gradient-to-r from-pink-400/20 to-red-400/20 rounded-full blur-xl animate-float-delayed"></div>
            <div className="absolute bottom-20 left-1/3 w-40 h-40 bg-gradient-to-r from-emerald-400/20 to-teal-400/20 rounded-full blur-xl animate-float-slow"></div>
          </div>

          <div className="container mx-auto px-4 py-8 relative">
            {/* Close Button */}
            <div className="flex justify-end mb-8">
              <button
                onClick={toggleMenu}
                className="p-3 rounded-xl bg-gradient-to-r from-red-500/10 to-pink-500/10 hover:from-red-500/20 hover:to-pink-500/20 text-slate-700 dark:text-slate-300 hover:scale-110 transition-all duration-300 group cursor-pointer"
                aria-label="Close menu"
              >
                <X className="block h-6 w-6 group-hover:rotate-90 transition-transform duration-300" />
              </button>
            </div>

            {/* Menu Items Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto">
              {menuItems.map((item, index) => (
                <div
                  key={item.name}
                  className="menu-item-container"
                  style={{
                    animationDelay: `${index * 150}ms`,
                  }}
                >
                  <Link
                    to={item.path}
                    className="group relative block p-8 rounded-2xl bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm border border-white/20 dark:border-slate-700/50 hover:border-transparent transition-all duration-500 overflow-hidden"
                    onClick={toggleMenu}
                  >
                    {/* Gradient background on hover */}
                    <div
                      className={`absolute inset-0 bg-gradient-to-br ${item.color} opacity-0 group-hover:opacity-10 transition-opacity duration-500`}
                    ></div>

                    {/* Ripple effect */}
                    <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>

                    {/* Icon container */}
                    <div
                      className={`relative mb-6 mx-auto w-16 h-16 rounded-xl bg-gradient-to-br ${item.color} p-4 text-white group-hover:scale-110 group-hover:rotate-6 transition-all duration-500 shadow-lg`}
                    >
                      <div className="absolute inset-0 rounded-xl bg-white/20 group-hover:bg-white/30 transition-colors duration-300"></div>
                      <div className="relative z-10 flex items-center justify-center h-full">
                        {item.icon && <item.icon className="w-6 h-6" />}
                      </div>
                      {/* Glow effect */}
                      <div
                        className={`absolute -inset-2 bg-gradient-to-br ${item.color} rounded-xl blur opacity-0 group-hover:opacity-50 transition-opacity duration-500`}
                      ></div>
                    </div>

                    {/* Text content */}
                    <div className="relative text-center">
                      <h3 className="text-xl font-bold text-slate-900 dark:text-white mb-2 group-hover:scale-105 transition-transform duration-300">
                        {item.name}
                      </h3>
                      <p className="text-sm text-slate-600 dark:text-slate-400 group-hover:text-slate-700 dark:group-hover:text-slate-300 transition-colors duration-300">
                        {item.description}
                      </p>
                    </div>

                    {/* Corner decoration */}
                    <div className="absolute top-2 right-2 w-2 h-2 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </Link>
                </div>
              ))}
            </div>

            {/* Additional decorative elements */}
            <div className="mt-16 text-center">
              <div className="inline-flex items-center gap-2 px-6 py-3 rounded-full bg-gradient-to-r from-blue-500/10 to-purple-500/10 backdrop-blur-sm border border-white/20 dark:border-slate-700/50">
                <Zap className="w-4 h-4 text-yellow-500 animate-pulse" />
                <span className="text-sm text-slate-600 dark:text-slate-400">
                  Powered by modern web technologies
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};


{/* Pagination */}
              <div className="mt-10">
                <PaginationCom
                  productsCount={productsCount}
                  resultPerPage={resultPerPage}
                  currentPage={currentPage}
                  setCurrentPage={setCurrentPage}
                  filteredProductsCount={filteredProductsCount}
                />
              </div>

export default Navbar;
